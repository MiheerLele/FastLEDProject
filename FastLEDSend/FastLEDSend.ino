#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "LEDStrip"
  https://create.arduino.cc/cloud/things/c4a1eb54-35da-4c06-9d9e-37079b37f914 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudColoredLight lightColor;
  CloudSwitch fade;
  CloudSwitch gamerLights;
  CloudSwitch pulse;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#define DEVICE_NUM 4 // Transmission device id, i have defined the regular nano as device #4
bool wireInit = false;

void setup() {
  // Initialize serial and wait for port to open:
  
  Serial.begin(9600);
  for(unsigned long const serialBeginTime = millis(); !Serial && (millis() - serialBeginTime > 5000); ) { }
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, onConnect); 
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::DISCONNECT, onDisconnect);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  //Wire.begin(); // join i2c bus (address optional for master)

}

void loop() {
  ArduinoCloud.update();
}


void onLightColorChange() { // Callback from event recieved by alexa on light strip status changed
  if (wireInit) {
    Serial.println("Color Change Recieved from Alexa");
    Wire.beginTransmission(DEVICE_NUM);
    Wire.write((byte)0x00); // Write event byte
    Wire.write((byte)lightColor.getSwitch());
    if (lightColor.getSwitch()) { // If the light strip is on
      byte r, g, b;
      lightColor.getValue().getRGB(r, g, b); // Get the rgb vals
      Wire.write(r);
      Wire.write(g);
      Wire.write(b);
      Wire.write((byte)lightColor.getBrightness());
    }
    int _error = Wire.endTransmission();
    if (_error != 0) {
      Serial.print("Error: ");
      Serial.println(_error);
    }
    delay(50);
  }
}


void onFadeChange() { // Represented as a "Smart Switch", Boolean
  if (wireInit) {
    Serial.println("Fade Change Recieved from Alexa");
    Wire.beginTransmission(DEVICE_NUM);
    Wire.write(1); // Write event byte
    Wire.write(fade);
    Wire.endTransmission();
    delay(50);
  }
}

void onPulseChange() { // Represented as a "Smart Switch", Boolean
  if (wireInit) {
    Serial.println("Pulse Change Recieved from Alexa");
    Wire.beginTransmission(DEVICE_NUM);
    Wire.write(2); // Write event byte
    Wire.write(pulse);
    Wire.endTransmission();
    delay(50);
  }
}



void onGamerLightsChange() {
  if (wireInit) {
    Serial.println("Gamer Lights Change Recieved from Alexa");
    Wire.beginTransmission(DEVICE_NUM);
    Wire.write(3);
    Wire.write(gamerLights);
    Wire.endTransmission();
    delay(50);
  }
}

void onMicChange() {
  if (wireInit) {
    Serial.println("Mic Change Recieved from Alexa");
    Wire.beginTransmission(DEVICE_NUM);
    Wire.write(4);
    Wire.write(mic);
    Wire.endTransmission();
    delay(50);
  }
}

void onConnect(){
  Wire.begin();
  wireInit = true;
  Serial.println("Board successfully connected to Arduino IoT Cloud");
}

void onDisconnect() {
  wireInit = false;
}
